apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "httpfs.fullname" . }}
  labels:
    {{- include "httpfs.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  serviceName: {{ include "httpfs.fullname" . }}
  selector:
    matchLabels:
      {{- include "httpfs.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "httpfs.selectorLabels" . | nindent 8 }}
    spec:
      hostNetwork: {{ .Values.hostNetwork }}
      hostPID: {{ .Values.hostPID }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "httpfs.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
#      initContainers:
#        - name: wait-for-postgresql
#          image: busybox
#          command: ['sh', '-c', 'until nc -zv {{ include "postgresql.primary.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local {{ include "postgresql.service.port" . }}; do echo "Waiting for postgres to be available..."; sleep 10; done;'] 
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ['/bin/sh']
#          args: ["-c","cp -f /etc/hadoop/conf/httpfs-site.xml /opt/hadoop-hdfs-httpfs-0.20.2-cdh3u7-SNAPSHOT/etc/hadoop/ && ./sbin/httpfs.sh run"]
          args: ["-c","sleep infinity"]
          ports:
            - name: httpfs
              containerPort: 14000
              protocol: TCP
            - name: httpfs-admin
              containerPort: 14001
              protocol: TCP
#          livenessProbe:
#            tcpSocket:
#              port: httpfs
#          readinessProbe:
#            tcpSocket:
#              port: httpfs
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: hadoop-config
              mountPath: /etc/hadoop/conf/
              readOnly: true
            - name: kerberos-config
              mountPath: /etc/krb5.conf
              subPath: krb5.conf
              readOnly: true
            - name: kerberos-keytabs
              mountPath: /etc/security/
              readOnly: true
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: hadoop-config
          projected:
            sources:
              - configMap:
                  name: {{ template "httpfs.config.fullname" . }}
              - configMap:
                  name: {{ template "hdfs-k8s.config.fullname" . }}
        - name: kerberos-config
          configMap:
            name: {{ template "krb5-configmap" . }}
        - name: kerberos-keytabs
          projected:
            sources:
              - secret:
                  name: {{ template "httpfs-keytabs-secret" . }}
              - secret:
                  name: {{ template "krb5-keytabs-secret" . }}

